# -*- coding: utf-8 -*-
"""ML_preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cemgujDEiazx1cgRhGGsVi1naaodqDJP

Importing needed libraries for preprocessing
"""

import matplotlib.pyplot as plt
import numpy as np
import h5py
import librosa
import librosa.display
import os, sys
import time
import pandas as pd
import pickle

"""Five sound feature extraction methods:
1. Mel-frequency cepstral coefficients
2. chromagram
3. Mel-scaled power spectrogram
4. spectral contrast
5. tonal centroid features

Five features and wave plot of the 3 files for each class were visualized for a manual analysis of the distinction between sound types.

The time-series feature matrices of one sound extracted by the individual methods were combined in the row direction, resulting in a (173, 40) input data

The column direction contained the time-series data, whereas the row direction contained the feature data of a specific time. Only four-second long files were used, allowing the unification of the input data size.
"""

from google.colab import drive #Can ignore if done locally
drive.mount('/content/gdrive')

#!tar -xvf  '/content/gdrive/Shared drives/CS1470-Final/UrbanSound8K.tar.gz' -C '/content/gdrive/Shared drives/CS1470-Final'

def get_features(filename):
  num_mfcc = 40
  try:
    audio, SR = librosa.load(filename)
    mfcc = librosa.feature.mfcc(audio, sr=SR, n_mfcc=num_mfcc)
  except Exception as e:
    print('Error encountered getting features, file: ', filename)
    return None

  return mfcc

audio_path = '/content/gdrive/My Drive/DL Final Project/UrbanSound8K/audio'
csv_metadata = pd.read_csv(audio_path + '/../metadata/UrbanSound8K.csv')

mini_csv = csv_metadata.head(10)

collected_mfccs = []

for i, row in mini_csv.iterrows(): #csv_metadata
  curr_file = os.path.join(os.path.abspath(audio_path),'fold'+str(row["fold"])+'/',str(row["slice_file_name"]))
  curr_class = row['classID']
  if row['end'] - row['start'] == 4:
    curr_mfcc = np.transpose(get_features(curr_file))
    collected_mfccs.append([curr_mfcc, curr_class])

pickle.dump(collected_mfccs, open('mfccs.pkl', 'wb'))

# from google.colab import files
# files.download('mfccs.pkl')

with open('mfccs.pkl', 'rb') as f:
  extract = pickle.load(f)
  print(extract)
